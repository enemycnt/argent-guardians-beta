// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get success(): boolean {
    let value = this.get("success");
    return value.toBoolean();
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get signedHash(): Bytes {
    let value = this.get("signedHash");
    return value.toBytes();
  }

  set signedHash(value: Bytes) {
    this.set("signedHash", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class GuardianRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GuardianRequest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GuardianRequest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GuardianRequest", id.toString(), this);
  }

  static load(id: string): GuardianRequest | null {
    return store.get("GuardianRequest", id) as GuardianRequest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get guardian(): Bytes {
    let value = this.get("guardian");
    return value.toBytes();
  }

  set guardian(value: Bytes) {
    this.set("guardian", Value.fromBytes(value));
  }

  get executeAfter(): BigInt {
    let value = this.get("executeAfter");
    return value.toBigInt();
  }

  set executeAfter(value: BigInt) {
    this.set("executeAfter", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class Guardian extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Guardian entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Guardian entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Guardian", id.toString(), this);
  }

  static load(id: string): Guardian | null {
    return store.get("Guardian", id) as Guardian | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get guardian(): Bytes {
    let value = this.get("guardian");
    return value.toBytes();
  }

  set guardian(value: Bytes) {
    this.set("guardian", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}
